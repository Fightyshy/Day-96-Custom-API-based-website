from itsdangerous import URLSafeTimedSerializer

# https://www.freecodecamp.org/news/setup-email-verification-in-flask-app/


def generate_token(charid, app):
    """Generates a confirmation token to be inserted into the chosen character's lodestone character profile """
    serialiser = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    return serialiser.dumps(charid, salt=app.config["SECURITY_PASSWORD_SALT"])


def generate_account_token(email, app):
    """Generates a confirmation token for email account verification"""
    serialiser = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    return serialiser.dumps(email, app.config["SECURITY_PASSWORD_SALT"])


def confirm_token(token, app, expiration=3600):
    """Decodes a token generated by generate_token, returns none if any exception is encountered (due to token expiry, malformed token, etc)"""
    serialiser = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    try:
        charid = serialiser.loads(
            token,
            salt=app.config["SECURITY_PASSWORD_SALT"],
            max_age=expiration,
        )
        return charid
    except Exception:
        return None


def confirm_account_token(token, app, expiration=1800):
    """Decodes a token generated by generate_account_token, returns none if any exception is encountered (due to token expiry, malformed token, etc)"""
    serialiser = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    try:
        email = serialiser.loads(
            token,
            salt=app.config["SECURITY_PASSWORD_SALT"],
            max_age=expiration,
        )

        return email
    except Exception:
        return None