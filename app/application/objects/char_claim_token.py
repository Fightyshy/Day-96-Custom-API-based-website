from itsdangerous import URLSafeTimedSerializer
from random import choice

# https://www.freecodecamp.org/news/setup-email-verification-in-flask-app/


def generate_token(charid: str, app):
    """Generates a token containing the character ID"""
    serialiser = URLSafeTimedSerializer(choice(app.config["SECRET_KEY"]))
    return serialiser.dumps(charid, salt=app.config["SECURITY_PASSWORD_SALT"])


def generate_token_email(charid: str, email: str, app):
    """Generates a token containing the character ID and the associated email address"""
    serialiser = URLSafeTimedSerializer(choice(app.config["SECRET_KEY"]))
    # Space seperated, split when decoding
    return serialiser.dumps(f"{charid} {email}", salt=app.config["SECURITY_PASSWORD_SALT"])


def confirm_token(token, app, expiration=3600) -> str:
    """Decodes a token generated by generate_token to return the character ID, returns a empty string if an exception occurrs (due to token expiry or invalidity)"""
    serialiser = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    try:
        charid = serialiser.loads(
            token,
            salt=app.config["SECURITY_PASSWORD_SALT"],
            max_age=expiration,
        )
        return charid
    except Exception:
        return ""


def confirm_token_email(token, app, expiration=300) -> list[str]:
    """Decodes a token generated by generate_token_email to return the character ID and associated email address, returns a empty string if an exception occurrs (due to token expiry or invalidity)"""
    serialiser = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    try:
        chars = serialiser.loads(
            token,
            salt=app.config["SECURITY_PASSWORD_SALT"],
            max_age=expiration
        )
        return chars.split(" ")
    except Exception:
        return ""
